{"version":3,"sources":["components/Header.js","components/SearchBarComponent.js","components/CardComponent.js","components/MainComponent.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","styled","nav","YellowPassport","Passport","Heading","h1","Header","InputWrapper","div","Input","input","SearchBarComponent","props","onSubmit","handleSubmit","id","type","name","placeholder","ref","StyledCard","breakpoint","Paragraph","Break","p","CardComponent","probability","country","flag","slide","keyframes","Slide","span","Wrapper","CardDeck","MainComponent","state","firstName","countries","bind","React","createRef","event","value","this","current","preventDefault","length","endpoint","axios","get","then","res","data","map","x","country_id","toFixed","setState","document","getElementById","blur","fullCountryNames","card","index","push","key","Component","FooterContainer","footer","IconContainer","WhiteGitHub","GithubSquare","WhiteLinkedIn","Linkedin","Footer","href","GlobalStyle","createGlobalStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a1b66dc7.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { Passport } from 'styled-icons/fa-solid/Passport';\n\n\nconst NavBar = styled.nav`\n  display: flex;\n  flex-direction: column;\n  @import url(\"//fonts.googleapis.com/css?family=Montserrat|Roboto&display=swap\");\n  font-family: \"Montserrat\", sans-serif;\n`;\n\nconst YellowPassport = styled(Passport)`\n    color: #FECE00;\n    width: 3rem;\n    height: 3rem;\n    align-self: center;\n`;\n\n\nconst Heading = styled.h1`\n    color: white;\n    font-size: 4rem;\n    text-align: center;\n    margin-bottom: 1.5rem;\n`;\n\nfunction Header() {\n    return (\n      <NavBar>\n        <Heading>Nationality Predictor</Heading>\n        <YellowPassport />\n      </NavBar>\n    );\n}\n\nexport default Header;","import React from 'react'\nimport styled from \"styled-components\";\n\nconst InputWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst Input = styled.input`\n  height: 4rem;\n  width: 20rem;\n  text-align: center;\n  margin-top: 3rem;\n  font-size: 1.5rem;\n  border: 0.3rem solid #ffce00;\n  border-radius: 0.5rem;\n  transition-duration: 0.1s;\n\n  :focus {\n    border-color: #09aded;\n  }\n`;\n\n\nfunction SearchBarComponent(props) {\n    return (\n      <>\n        <form onSubmit={props.handleSubmit}>\n          <InputWrapper>\n            <Input\n                id=\"searchbar\"\n              type=\"text\"\n              name=\"firstName\"\n              placeholder=\"Input the first name to search\"\n              ref={props.input}\n            />\n          </InputWrapper>\n        </form>\n      </>\n    );\n}\n\nexport default SearchBarComponent","import React from 'react';\nimport styled from 'styled-components';\nimport breakpoint from \"styled-components-breakpoint\";\n\n\nconst StyledCard = styled.div`\n  height: 25rem;\n  background-color: white;\n  flex: 0 0 1;\n  max-width: 80%;\n  ${breakpoint(\"tablet\")`\n    min-width: 30%;\n  `}\n  margin: 3rem;\n  border-radius: 0.5rem;\n  text-align: center;\n  -webkit-box-shadow: 3px 5px 25px 8px rgba(0, 0, 0, 0.57);\n  box-shadow: 3px 5px 25px 8px rgba(0, 0, 0, 0.57);\n`;\n\nconst Paragraph = styled.div`\n  display: flex;\n  flex-direction: column;\n  font-family: \"Lobster\", cursive;\n  font-weight: 800;\n  font-size: 1.5rem;\n  align-items: center;\n  justify-content: center;\n  line-height: 1.5rem;\n  margin-top: 2rem;\n`;\n\nconst Break = styled.p`\n  font-family: \"Luckiest Guy\", cursive;\n  font-size: 1.5rem;\n  padding-top: 1rem;\n  color: #09aded;\n`;\n\nfunction CardComponent(props) {\n    return (\n        <StyledCard>\n          <Paragraph>\n            There is a<Break>{props.probability}</Break>\n            Probability that\n            <Break>{props.name}</Break>\n            is from :<Break>{props.country}</Break>\n            <Break>{props.flag}</Break>\n          </Paragraph>\n        </StyledCard>\n   \n    );\n}\n\nexport default CardComponent","import React, { Component } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport SearchBarComponent from './SearchBarComponent';\nimport CardComponent from './CardComponent';\nimport breakpoint from 'styled-components-breakpoint'\nimport axios from 'axios';\nimport data from 'country-data';\n\nconst slide = keyframes`\n  0% {\n    -webkit-transform: translateX(1000px) scaleX(2.5) scaleY(0.2);\n            transform: translateX(1000px) scaleX(2.5) scaleY(0.2);\n    -webkit-transform-origin: 0% 50%;\n            transform-origin: 0% 50%;\n    -webkit-filter: blur(40px);\n            filter: blur(40px);\n    opacity: 0;\n  }\n  100% {\n    -webkit-transform: translateX(0) scaleY(1) scaleX(1);\n            transform: translateX(0) scaleY(1) scaleX(1);\n    -webkit-transform-origin: 50% 50%;\n            transform-origin: 50% 50%;\n    -webkit-filter: blur(0);\n            filter: blur(0);\n    opacity: 1;\n  }\n\n`;\n\nconst Slide = styled.span`\n  div {\n      -webkit-animation: ${slide} 0.5s cubic-bezier(0.39, 0.575, 0.565, 1) both;\n      animation: ${slide} 0.5s cubic-bezier(0.39, 0.575, 0.565, 1) both;\n  }\n`;\n\nconst Wrapper = styled.div`\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n\nconst CardDeck = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  ${breakpoint(\"tablet\")`\n    flex-direction: row;\n    flex-wrap: wrap;\n  `}\n  justify-content: center;\n`;\n\nclass MainComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstName: ``,\n      countries: [],\n      probability: []\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.input = React.createRef();\n  }\n\n  handleSubmit(event) {\n    const value = this.input.current.value;\n    event.preventDefault();\n    if(value.length > 0) {\n        const endpoint = `https://api.nationalize.io/?name=${value}`;\n        axios.get(endpoint).then(res => {\n        const countries = res.data.country.map(x => x.country_id);\n        const probability = res.data.country.map(x => x.probability.toFixed(4));\n        this.setState({\n            firstName: value,\n            countries,\n            probability\n        });\n        });\n        document.getElementById(\"searchbar\").blur();\n        return\n    }\n    document.getElementById(\"searchbar\").blur();\n    this.setState({firstName: ``})\n  }\n\n  render() {\n    const fullCountryNames = this.state.countries.map(x => {\n      return data.countries[x].name;\n    });\n    const card = [];\n    if(this.state.firstName.length > 0) {\n        fullCountryNames.map((x, index) => {\n          return card.push(\n            <CardComponent\n              country={x}\n              name={this.state.firstName}\n              probability={this.state.probability[index]}\n              key={index}\n            />\n          );\n        });\n    }\n    \n\n    return (\n      <Wrapper>\n        <SearchBarComponent\n          handleSubmit={this.handleSubmit}\n          input={this.input}\n          {...this.state}\n        />\n        <Slide>\n          <CardDeck>{card}</CardDeck>\n        </Slide>\n      </Wrapper>\n    );\n  }\n}\n\nexport default MainComponent","import React from 'react';\nimport styled from 'styled-components';\nimport { GithubSquare } from 'styled-icons/fa-brands/GithubSquare';\nimport { Linkedin } from 'styled-icons/fa-brands/Linkedin';\n\nconst FooterContainer = styled.footer`\n    display: flex;\n    font-family: \"Roboto\";\n    font-size: 1.2rem;\n    justify-content: flex-end;\n    align-items: center;\n    flex-direction: column;\n    height: 20vh;\n    margin-top: 2rem;\n    margin-bottom: 5rem;\n`;\n\nconst IconContainer = styled.div` \n  display: flex;\n  flex-direction: row;\n`\n;\n\nconst WhiteGitHub = styled(GithubSquare)`\n  color: #fff;\n  width: 3.5rem;\n  height: 3.5rem;\n  padding-right: 2rem;\n`;\n\nconst WhiteLinkedIn = styled(Linkedin)`\n  color: #fff;\n  width: 3.5rem;\n  height: 3.5rem;\n`;\n\nfunction Footer() {\n    return (\n      <FooterContainer>\n        <h4>Created in 2019 by Soo Hwan Kim</h4>\n        <IconContainer>\n          <a href=\"https://github.com/josephk96\">\n            <WhiteGitHub />\n          </a>\n          <a href=\"https://www.linkedin.com/in/soo-hwan-kim-39645898\">\n            <WhiteLinkedIn />\n          </a>\n        </IconContainer>\n      </FooterContainer>\n    );\n}\n\n\nexport default Footer","import React, { Component } from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport Header from './components/Header';\nimport MainComponent from './components/MainComponent'\nimport Footer from './components/Footer'\n\n\nconst GlobalStyle = createGlobalStyle`\n    body {\n        @import url('//fonts.googleapis.com/css?family=Lobster|Luckiest+Guy|Roboto&display=swap');\n        font-family: font-family: 'Roboto', sans-serif;\n        margin: 0;\n        padding: 0;\n        font-size: 62.5%;\n        background-color: #0375B4;\n    }\n`;\n\nclass App extends Component {\n  render() {\n    return(\n      <>\n        <GlobalStyle />\n        <Header />\n        <MainComponent />\n        <Footer />\n      </>\n    )\n  }\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}